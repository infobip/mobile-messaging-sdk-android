buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.google.gms:google-services:4.4.2'
    }
}

plugins {
    id 'com.android.application'
}

android {
    namespace = "org.infobip.mobile.messaging.demo"
    buildToolsVersion = mm_buildToolsVersion
    compileSdk = mm_compileSdkVersion

    defaultConfig {
        minSdkVersion mm_minSdkVersion
        targetSdkVersion mm_targetSdkVersion
        versionCode 1
        versionName version
        applicationId "org.infobip.mobile.messaging.demo"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    signingConfigs {
        release {
            storeFile file("${property(project, 'signingKeystore', 'KEYSTORE')}")
            storePassword "${property(project, 'signingKeystorePassword', 'KEYSTORE_PASSWORD')}"
            keyAlias "alias_name"
            keyPassword "${project.hasProperty('signingKeystorePassword') ? project['signingKeystorePassword'] : System.getenv('KEYSTORE_PASSWORD')}"
        }
    }

    buildTypes {
        configureEach {
            property(project, 'google_app_id', 'GOOGLE_APP_ID')?.with { resValue "string", "google_app_id", delegate }
            property(project, 'infobip_application_code', 'INFOBIP_APPLICATION_CODE')?.with { resValue "string", "infobip_application_code", delegate }
            property(project, 'infobip_api_uri', 'INFOBIP_API_URI')?.with { resValue "string", "infobip_api_uri", delegate }
            property(project, 'infobip_inappchat_widget_uri', 'INFOBIP_INAPPCHAT_WIDGET_URI')?.with { resValue "string", "ib_inappchat_widget_uri", delegate }
        }

        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions = ["default"]

    productFlavors {
        push {
            dimension "default"
        }

        chat {
            dimension "default"
        }

        chatWithCalls {
            dimension "default"
            minSdkVersion 21
            property(project, 'infobip_webrtc_configuration_id', 'INFOBIP_WEBRTC_CONFIGURATION_ID')?.with { resValue "string", "infobip_webrtc_configuration_id", delegate }
        }

        deeplink {
            dimension "default"
        }

        web {
            dimension "default"
        }

        customInApp {
            dimension "default"
        }

        cryptorMigration {
            dimension "default"
        }


        inbox {
            dimension "default"
        }
    }

    sourceSets {
        chatWithCalls {
            java.srcDirs += "src/chatCommon/java"
            kotlin.srcDirs += ["src/chatCommon/java", "src/chatCommon/kotlin"]
            res.srcDirs += "src/chatCommon/res"
        }
        chat {
            java.srcDirs += "src/chatCommon/java"
            kotlin.srcDirs += ["src/chatCommon/java", "src/chatCommon/kotlin"]
            res.srcDirs += "src/chatCommon/res"
        }
    }

    lint {
        abortOnError false
    }

}

dependencies {
    implementation "androidx.constraintlayout:constraintlayout:$mm_constraintLayoutVersion"
    testImplementation "junit:junit:$mm_junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$mm_androidJunitVersion"

    implementation project(":infobip-mobile-messaging-android-chat-sdk")
    implementation project(":infobip-mobile-messaging-android-resources")
    implementation project(":infobip-mobile-messaging-android-sdk")
    implementation project(":infobip-mobile-messaging-api-java")
    implementation project(":infobip-mobile-messaging-android-inbox-sdk")

    implementation "androidx.appcompat:appcompat:$mm_appCompatVersion"
    implementation "com.google.android.material:material:$mm_materialVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.0.1'

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$mm_desugarJdkVersion"

    //To add WebRTC use build flavour "chatWithCalls"
    chatWithCallsImplementation project(':infobip-rtc-ui')

    //To add JWT use build flavour "chat" and "chatWithCalls"
    chatImplementation 'com.nimbusds:nimbus-jose-jwt:9.0.1'
    chatWithCallsImplementation 'com.nimbusds:nimbus-jose-jwt:9.0.1'

    //To add cryptor use build flavour "cryptorMigration"
    cryptorMigrationImplementation project(":infobip-mobile-messaging-android-cryptor-migration")

    implementation "com.android.support:multidex:$mm_multidexVersion"
}

private static String property(Project project, String projectKey, String environmentKey) {
    return project.hasProperty(projectKey) ? project[projectKey] : System.getenv(environmentKey)
}

tasks.register('uncommentGoogleServices') {
    doLast {
        def readmeFile = new File('infobip-mobile-messaging-android-demo/build.gradle')
        def text = readmeFile.text
        readmeFile.withWriter { w ->
            w << text.replaceFirst("//apply plugin: 'com\\.google\\.gms\\.google-services'", "apply plugin: 'com\\.google\\.gms\\.google-services'")
        }
    }
}

//It's for usage of google-services.json file, if you are using strings.xml to provide Firebase data, comment next line
//apply plugin: 'com.google.gms.google-services'
