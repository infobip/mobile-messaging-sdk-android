//to generate coverage report call "debugCoverage" and "jacocoTestReport" tasks
afterEvaluate {
    project.plugins.apply('jacoco')

    project.jacoco {
        toolVersion '0.8.7'
    }

    project.tasks.withType(Test) {
        it.jacoco.includeNoLocationClasses = true
        it.jacoco.excludes = ['jdk.internal.*']
    }

    //coverage for api-java module
    if (!project.plugins.hasPlugin('com.android.library')) {
        jacocoTestReport {
            reports {
                xml.enabled(true)
                html.enabled(true)
            }
        }.dependsOn(test)
        return
    }

    //coverage for other modules
    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def capVariantName = variantName.capitalize()
                def connectedAndroidTestTaskName = "connected${capVariantName}AndroidTest"
                def testUnitTestTaskName = "test${capVariantName}UnitTest"
                if (project.tasks.findByName(connectedAndroidTestTaskName) && project.tasks.findByName(testUnitTestTaskName)) {
                    createCoverageTask(variantName, connectedAndroidTestTaskName, testUnitTestTaskName, project)
                }
            }
}

private void createCoverageTask(variantName, uiTestTaskName, unitTestTaskName, final Project project) {
    project.tasks.create(name: "${variantName}Coverage", type: JacocoReport, dependsOn: [uiTestTaskName, unitTestTaskName]) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the ${variantName} build."
        reports {
            xml.enabled(true)
            html.enabled(true)
        }
        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                '**/*$ViewInjector*.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory.*',
                '**/*_Provide*Factory*.*',
                '**/*_ViewBinding*.*',
                '**/AutoValue_*.*',
                '**/R2.class',
                '**/R2$*.class',
                '**/*Directions$*',
                '**/*Directions.*',
                '**/*Binding.*'
        ]
        def jClassPaths = "${project.buildDir}/intermediates/javac/${variantName}/classes"
        def kClassPaths = "${project.buildDir}/tmp/kotlin-classes/${variantName}"
        def javaClasses = fileTree(dir: jClassPaths, excludes: excludes)
        def kotlinClasses = fileTree(dir: kClassPaths, excludes: excludes)
        classDirectories.from = files([javaClasses, kotlinClasses])
        def sourceDirs = [
                "${project.projectDir}/src/main/java",
                "${project.projectDir}/src/main/kotlin",
                "${project.projectDir}/src/${variantName}/java",
                "${project.projectDir}/src/${variantName}/kotlin"
        ]
        sourceDirectories.from = files(sourceDirs)
        executionData.from = fileTree(dir: project.projectDir, includes: ["**/*.exec", "**/*.ec"])
    }
}