buildscript {
    //Kotlin-Gradle-AGP compatibility matrix https://kotlinlang.org/docs/gradle-configure-project.html#apply-the-plugin
    ext.mm_kotlinVersion = "2.1.0"
    ext.mm_gradlePluginVersion = '8.9.1'
    ext.mm_desugarJdkVersion = "2.1.3"

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$mm_gradlePluginVersion"
        classpath "com.android.tools:desugar_jdk_libs:$mm_desugarJdkVersion"
    }
}

plugins {
    id 'net.researchgate.release' version '3.0.2'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'org.jetbrains.kotlin.android' version "$mm_kotlinVersion" apply false
    id "org.sonarqube" version "4.4.1.3373"
    id "jacoco"
}

ext {
    mm_minSdkVersion = 21
    mm_compileSdkVersion = 36
    mm_targetSdkVersion = 36
    mm_buildToolsVersion = "36.0.0"
    mm_firebaseMessagingVersion = "22.0.0"
    mm_gmsLocationVersion = "21.0.1"
    mm_constraintLayoutVersion = "2.2.1"
    mm_appCompatVersion = "1.7.1"
    mm_materialVersion = "1.12.0"
    mm_coreKtxVersion = "1.10.1"
    mm_lifecycleVersion = "2.9.3"
    mm_junitVersion = "4.13.2"
    mm_androidJunitVersion = "1.2.1"
    mm_mockitoCoreVersion = "4.11.0"
    mm_multidexVersion = "2.0.1"
    mm_coroutinesVersion = "1.10.2"
    mm_androidTestRunnerVersion = "1.6.2"
    mm_version = "$version"
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

//It's required to be applied here, to have `subprojects.publish` task available
subprojects {
    apply plugin: "maven-publish"
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null) {
                    namespace project.group
                }
            }
        }
    }
}

tasks.register('publishAllPublicationsToMavenRepository') {
    dependsOn subprojects.collect { it.tasks.named('publishReleasePublicationToSonatypeRepository') }
}

tasks.register('updateVersionInReadme') {
    doLast {
        def readmeFile = new File('README.md')
        def text = readmeFile.text
        readmeFile.withWriter { w ->
            w << text.replaceFirst('infobip-mobile-messaging-android-sdk:\\d+\\.\\d+\\.\\S+@aar', "infobip-mobile-messaging-android-sdk:$version@aar")
        }
    }
}

tasks.register('updateRtcUiVersionInReadme') {
    doLast {
        def readmeFile = new File('infobip-rtc-ui/README.md')
        def text = readmeFile.text
        readmeFile.withWriter { w ->
            w << text.replaceFirst("'com.infobip:infobip-rtc-ui:\\d+\\.\\d+\\.\\S+'", "'com.infobip:infobip-rtc-ui:$version'")
        }
    }
}

afterReleaseBuild.dependsOn updateVersionInReadme, updateRtcUiVersionInReadme

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
            password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
            stagingProfileId.set(project.hasProperty('sonatypeStagingProfileId') ? project.property('sonatypeStagingProfileId') : System.getenv('SONATYPE_STAGING_PROFILE_ID'))
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

closeAndReleaseSonatypeStagingRepository.mustRunAfter subprojects.publish
afterReleaseBuild.dependsOn subprojects.publish, closeAndReleaseSonatypeStagingRepository

release {
    buildTasks = ['clean', 'build']
    git {
        requireBranch.set('')
        pushToRemote.set('origin')
    }
}

project.tasks.named("sonarqube").configure {
    dependsOn 'lint'
    dependsOn 'lintReportRelease'
}

sonar {
    properties {
        property "sonar.host.url", "https://sonar.ib-ci.com"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.branch.name", System.getenv('BRANCH_NAME_TO_BUILD')
        property "sonar.projectVersion", project.version
        property "sonar.projectName", "infobip-mobile-messaging-android"
        property "sonar.projectKey", "infobip-mobile-messaging-android"
        property "sonar.androidLint.reportPaths", "${layout.buildDirectory}/reports/lint-results.xml"
        property "sonar.exclusions", "" +
                "infobip-mobile-messaging-android-demo/**/*, " +
                "infobip-mobile-messaging-android-cryptor-migration/**/*, " +
                "infobip-mobile-messaging-android-test/**/*, " +
                "infobip-rtc-ui/**/*"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "${layout.buildDirectory}/test-results/test/"
        property "sonar.coverage.jacoco.xmlReportPaths", "" +
                "${project.projectDir}/infobip-mobile-messaging-android-inbox-sdk/build/reports/jacoco/debugCoverage/debugCoverage.xml, " +
                "${project.projectDir}/infobip-mobile-messaging-android-sdk/build/reports/jacoco/debugCoverage/debugCoverage.xml, " +
                "${project.projectDir}/infobip-mobile-messaging-api-java/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}